<?xml version="1.0"?>
<!--
  Copyright 2002, 2005 The Apache Software Foundation.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  
-->
<!-- ====================================================================== 
     18.11.2005 12:01:30                                                        

     log4js    
     Logging library for JavaScript which is using almost same API than log4j
                   
     Stephan Strittmatter                                                               
     ====================================================================== -->
<project name="Log4js" default="dist" basedir=".">
	<description>
	  	ANT build file for Log4js, the logging library for JavaScript which is 
		using almost same API than log4j.
	</description>
	<!-- The build.properties file defines the parth to local jar files -->
	<property file="build.properties" />
	<property environment="env" />

	<property name="version" value="${version}" />

	<property name="src.base" value="log4js" />
	<property name="src.target" value="${src.base}/target" />
	<property name="src.dir" value="${src.base}/src/main" />
	<property name="src.js.dir" value="${src.dir}/js" />

	<property name="lib.dir" value="lib" />

	<property name="tools.dir" value="tools" />

	<property name="doc.dir" value="docs" />
	<property name="xdoc.dir" value="${src.dir}/xdocs" />

	<!-- build properties -->
	<property name="dist.dir" value="build" />
	<property name="dist.docs.dir" value="${dist.dir}/docs" />
	<property name="dist.reports.dir" value="${dist.dir}/reports" />

	<property name="apidoc.dir" value="${dist.dir}/docs/api" />

	<!-- example properties -->
	<property name="example.src.dir" value="log4js-examples/src/main/examples" />
	<property name="example.webapp.dir" value="${dist.dir}/webapp" />
	<property name="example.war.name" value="log4js-example-${version}.war" />
	<property name="log4j.jar" value="${lib.dir}/log4j-${tools.log4j.version}.jar" />
	
	<property name="servlet-api.jar" value="${lib.dir}/servlet-api-${tools.servlet-api.version}.jar" />

	<!-- unit tests -->
	<property name="src.test.dir" value="{src.base}/src/test" />
	<property name="src.test.java.dir" value="${src.test.dir}/java" />
	<property name="src.test.js.dir" value="${src.test.dir}/js" />
	<property name="classes.java.dir" value="${dist.dir}/classes" />
	<property name="classes.test.java.dir" value="${dist.dir}/test/classes" />

	<property name="war.dir" value="${dist.dir}/war" />
	
	<!-- FORREST_HOME must be set as an environment variable -->
	<property name="forrest.home" value="${env.FORREST_HOME}" />
	<property name="project.site-dir" value="${dist.dir}/site" />


	<!-- release properties -->
	<property name="release.dir" value="release" />

	<!-- OS specific properties -->
	<condition property="isWin">
		<os family="windows" />
	</condition>
	<condition property="isUnix">
		<os family="unix" />
	</condition>
	<condition property="isMac">
		<os family="mac" />
	</condition>

	<!-- OS specific tasks -->
	<target name="-compile-win" if="isWin">
		<exec executable="cmd" failonerror="true" dir="${src.base}">
			<arg line="/c" />
			<arg line="grunt" />
			<arg line="concat uglify" />
		</exec>
	</target>
	<target name="-compile-unix" if="isUnix">
		<exec executable="grunt" failonerror="true" dir="${src.base}">
			<arg line="concat uglify" />
		</exec>
	</target>
	<target name="-compile-mac" if="isMac">
		<fail message="Sorry, MAC is not supported." />
	</target>


	<target name="-doc.api-win" if="isWin">
		<exec executable="cmd">
			<arg line="/c" />
			<arg line="grunt" />
			<arg line="jsdoc" />
		</exec>
	</target>
	<target name="-doc.api-unix" if="isUnix">
		<exec executable="grunt" failonerror="true" dir="${src.base}">
			<arg line="jsdoc" />
		</exec>
	</target>
	<target name="-doc.api-mac" if="isMac">
		<fail message="Sorry, MAC is not supported." />
	</target>

	<target name="-jshint-win" if="isWin">
		<exec executable="cmd" failonerror="false" dir="${src.base}">
			<arg line="/c" />
			<arg line="grunt" />
			<arg line="jshint" />
		</exec>
	</target>
	<target name="-jshint-unix" if="isUnix">
		<exec executable="grunt" failonerror="true" dir="${src.base}">
			<arg line="jshint" />
		</exec>
	</target>
	<target name="-jshint-mac" if="isMac">
		<fail message="Sorry, MAC is not supported." />
	</target>

	<target name="-site-win" if="isWin">
		<exec executable="cmd" failonerror="false" dir="${src.base}">
			<arg line="/c" />
			<arg line="${env.FORREST_HOME}/bin/forrest.bat" />
		</exec>
	</target>
	<target name="-site-unix" if="isUnix">
		<exec executable="${env.FORREST_HOME}/bin/forrest" dir="log4js-site" />
	</target>
	<target name="-site-mac" if="isMac">
		<fail message="Sorry, MAC is not supported." />
	</target>

	<!-- ================================= 
          target: release              
         ================================= -->
	<target name="release" depends="dist, site" description="--> create release">
		<echo>generate complete distribution archives: ${release.dir}/log4js-${version}.zip</echo>

		<mkdir dir="${release.dir}" />

		<copy todir="${release.dir}/tmp/log4js-${version}">
			<fileset dir="${basedir}">
				<include name="${src.js.dir}/**" />
				<include name="${example.src.dir}/**" />
			</fileset>

			<fileset dir="${dist.dir}">
				<include name="lib/**" />
				<include name="docs/**" />
			</fileset>

			<fileset file="${dist.dir}/${example.war.name}" />

			<fileset file="CHANGELOG.txt" />
			<fileset file="INSTALL.txt" />
			<fileset file="LICENSE.txt" />
			<fileset file="NOTICE.txt" />
		</copy>

		<echo>Copy users guide to archive...</echo>
		<copy todir="${release.dir}/tmp/log4js-${version}/docs">
			<fileset file="${project.site-dir}/docu/users-guide.pdf" />
		</copy>

		<zip destfile="${release.dir}/log4js-${version}.zip" basedir="${release.dir}/tmp" />

		<tar destfile="${release.dir}/log4js-${version}.tar.gz" basedir="${release.dir}/tmp" compression="gzip" />

		<delete dir="${release.dir}/tmp" />

		<copy todir="${dist.dir}/site">
			<fileset dir="${project.site-dir}">
			</fileset>
		</copy>
	</target>

	<!-- ================================= 
          target: distribute              
         ================================= -->
	<!-- TODO: return dist.example -->
	<target name="dist" depends="dist.api, dist.doc" description="--> generate complete distribution">

	</target>


	<!-- ================================= 
          target: dist.api              
         ================================= -->
	<target name="dist.api" depends="init, compile" description="--> distribution archive for API">

	</target>


	<!-- ================================= 
          target: dist.example              
         ================================= -->
	<target name="dist.example" depends="init, compile" description="--> distribution WAR for example">
		<echo level="info">Generate example web archive: ${dist.dir}/${example.war.name}</echo>

		<copy todir="${example.webapp.dir}" overwrite="true">
			<fileset dir="${example.src.dir}">
				<exclude name="**/web.xml" />
				<exclude name="**/*.bak" />
			</fileset>
		</copy>
		<copy todir="${example.webapp.dir}/js" overwrite="true">
			<fileset dir="${src.js.dir}">
				<include name="**/*.js" />
			</fileset>
		</copy>
		<!-- additional libraries -->
		<copy todir="${example.webapp.dir}/WEB-INF/lib" file="${log4j.jar}" overwrite="true" />

		<war destfile="${dist.dir}/${example.war.name}" basedir="${example.webapp.dir}" webxml="${example.src.dir}/WEB-INF/web.xml" />
	</target>


	<!-- ================================= 
          target: dist.doc              
         ================================= -->
	<target name="dist.doc" depends="init, doc" description="--> generate documentation arcive">
		<echo level="info">Generate documentation archive: ${dist.dir}/log4js-doc-${version}.zip</echo>

		<zip destfile="${dist.dir}/log4js-doc-${version}.zip">
			<fileset dir="${dist.dir}/docs">
			</fileset>
		</zip>
	</target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: compile                      
         - - - - - - - - - - - - - - - - - -->
	<target name="compile" depends="init, -compile-win, -compile-unix, -compile-mac">
		<copy tofile="${dist.dir}/lib/log4js-lib.js" file="${src.target}/log4js.min.js" overwrite="true" />
	</target>

	<!-- ================================= 
          target: doc.api              
         ================================= -->
	<target name="doc.api" description="generate the API doc" depends="init,-doc.api-win,-doc.api-unix,-doc.api-mac">
		<copy todir="${apidoc.dir}">
			<fileset dir="log4js/target/docs/"></fileset>
		</copy>
	</target>


	<!-- ================================= 
          target: jslint              
         ================================= -->
	<target name="jslint" depends="jshint" description="--> (Depricated) verify syntax of JavaScripts">
	<echo>Warning!!! This task is renamed into jshint for new library is used</echo>
	</target>

	<!-- ================================= 
          target: jshint              
         ================================= -->
	<target name="jshint" depends="init,-jshint-win,-jshint-unix,-jshint-mac" description="--> verify syntax of JavaScripts">
	</target>

	<target name="doc" depends="doc.api" description="generate documentation">
	</target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: init                      
         - - - - - - - - - - - - - - - - - -->
	<target name="init">
		<mkdir dir="${tools.dir}" />
		<mkdir dir="${lib.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: download-dependencies                      
         - - - - - - - - - - - - - - - - - -->
	<target name="download-dependencies" depends="init">
		<!--setproxy proxyhost="proxy" proxyport="80" /-->

		<description>
	          To use this Maven-like freedom with respect to dependency setup,
	          do the following:

	          - run ant as you normally would, but add the following target to the command
	            line:

	            download-dependencies

	          For example:
	             C:>myproject\ant download-dependencies dist
		</description>

		<!-- for examples and servlet-->
	<!-- TODO: handle servlet api library download and log4js lib compilation, as well as example -->
		<!-- <get dest="${log4j.jar}" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/log4j/jars/log4j-${tools.log4j.version}.jar" verbose="true" /> -->
		<!-- <get dest="${servlet-api.jar}" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/javax.servlet/jars/servlet-api-${tools.servlet-api.version}.jar" verbose="true" /> -->
	</target>


	<!-- ================================= 
          target: clean              
         ================================= -->
	<target name="clean" description="--> clean the generated files">
		<delete dir="${dist.dir}" />
	</target>


	<!-- ================================= 
          target for forrest: use site to generate the files        
         ================================= -->
	<target name="site" description="Generates static HTML documentation" depends="doc.api, compile, -site-win, -site-unix, -site-mac">
		<copy todir="${project.site-dir}">
			<fileset dir="log4js-site/build/site"></fileset>
		</copy>
		<echo>Copy robots.txt into the site...</echo>
		<copy todir="${project.site-dir}" file="log4js-site/xdocs/content/xdocs/robots.txt">

		</copy>

		<mkdir dir="${project.site-dir}/apidocs" />

		<echo>Copy api-doc into the site...</echo>
		<copy todir="${project.site-dir}/apidocs">
			<fileset dir="${apidoc.dir}">
				<exclude name="*.bak" />
			</fileset>
		</copy>

		<echo>Copy example into the site...</echo>
		<copy tofile="${project.site-dir}/examples.html" file="${example.src.dir}/index.html" overwrite="true" />

		<copy tofile="${project.site-dir}/js/log4js.js" file="${src.js.dir}/log4js.js" overwrite="true" />

	</target>


	<!--
	<import file="${env.FORREST_HOME}/main/forrest.build.xml" />
-->
	<!-- 'site' is a target imported from forrest.build.xml -->
	<!--	<target name="post-build" depends="site, doc.api">
		<mkdir dir="${project.site-dir}/apidocs" />
		<copy todir="${project.site-dir}/apidocs">
			<fileset dir="${doc.dir}">
				<exclude name="*.bak" />
			</fileset>
		</copy>
	</target>
-->

	<!-- ================================= 
          target: test              
         ================================= -->
	<target name="test" depends="compile" description="--> Unit tests">
		<mkdir dir="${dist.reports.dir}" />
		<exec executable="grunt" failonerror="false" dir="${src.base}">
			<arg line="karma" />
		</exec>

		<!-- TODO: Create html output from the reports -->
		<!-- <junitreport todir="${dist.reports.dir}"> -->
		<!-- 	<fileset dir="${dist.reports.dir}"> -->
		<!-- 		<include name="TEST-*.xml" /> -->
		<!-- 	</fileset> -->
		<!-- 	<report format="frames" todir="${dist.reports.dir}" /> -->
		<!-- </junitreport> -->
	</target>


</project>
